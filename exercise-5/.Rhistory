sep = "<br />"
),
color = "Blue", symbol = I("circle"), size = ~ num_killed,
colors = "Green"
) %>%
colorbar(title = "Deaths in Shooting") %>%
layout(
title = "Shootings in 2018 <br />(size = amount of deaths)
Hover For More Information", geo = g
)
# My plot
new_data <- shooting_2018 %>%
group_by(state) %>%
summarize (
sum = sum(num_killed),
sum2 = sum(num_injured)
)
my_plot <- plot_ly(new_data, x = ~state, y = ~sum,
type = 'bar', name = 'Killed') %>%
add_trace(y = ~sum2, name = 'Injured') %>%
layout(yaxis = list(title = 'Injured + Killed'),
xaxis = list(title = "States", tickangle = -45),
barmode = 'stack'
)
my_plot
library(dplyr)
library(plotly)
library(RColorBrewer)
shooting_2018 <- read.csv("data/shootings-2018.csv", stringsAsFactors = FALSE)
# Intro Paragraph
num_of_shootings <- nrow(shooting_2018)
total_deaths <- sum(shooting_2018$num_killed)
biggest_impact <- shooting_2018 %>%
filter(num_killed == max(num_killed)) %>%
select(city)
biggest_impact_killed <- shooting_2018 %>%
filter(num_killed == max(num_killed)) %>%
select(num_killed)
num_injured <- sum(shooting_2018$num_injured)
# Aggregate Data Table
aggregate_data <- shooting_2018 %>%
group_by(state) %>%
summarize (
sum = sum(num_killed),
n = n(),
mean = mean(num_killed),
value = round(mean,2)
) %>%
arrange(desc(sum)) %>%
select(state,sum, n, value)
# Particular incident info
parkland <- shooting_2018%>%
filter(city == "Pompano Beach (Parkland)")
parkland_date <- parkland %>%
select(date)
parkland_address <- parkland %>%
select(address)
parkland_deaths <- parkland %>%
select(num_killed)
parkland_injured <- parkland %>%
select(num_injured)
parkland_state <- parkland %>%
select(state)
# Must be on one line to work properly
parkland_link <- "[Here](https://www.cnn.com/2018/02/15/us/florida-shooting-victims-school/index.html)"
# Interactive Map
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("black"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
graph_of_shootings <- plot_geo(shooting_2018, lat = ~ lat, lon = ~ lng) %>%
add_markers(
text = ~ paste(address, city, state, paste("Deaths:", num_killed),
paste("Injured:", num_injured),
sep = "<br />"
),
color = "Blue", symbol = I("circle"), size = ~ num_killed,
colors = "Green"
) %>%
colorbar(title = "Deaths in Shooting") %>%
layout(
title = "Shootings in 2018 <br />(size = amount of deaths)
Hover For More Information", geo = g
)
# My plot
new_data <- shooting_2018 %>%
group_by(state) %>%
summarize (
sum = sum(num_killed),
sum2 = sum(num_injured)
)
my_plot <- plot_ly(new_data, x = ~state, y = ~sum,
type = 'bar', name = 'Killed') %>%
add_trace(y = ~sum2, name = 'Injured') %>%
layout(yaxis = list(title = 'Injured + Killed'),
xaxis = list(title = "States", tickangle = -45),
margin = list(b = 100),
barmode = 'stack'
)
my_plot
library(dplyr)
library(plotly)
library(RColorBrewer)
#Read into the CSV file
shooting_2018 <- read.csv("data/shootings-2018.csv", stringsAsFactors = FALSE)
# Intro Paragraph Details
num_of_shootings <- nrow(shooting_2018)
total_deaths <- sum(shooting_2018$num_killed)
biggest_impact <- shooting_2018 %>%
filter(num_killed == max(num_killed)) %>%
select(city)
biggest_impact_killed <- shooting_2018 %>%
filter(num_killed == max(num_killed)) %>%
select(num_killed)
num_injured <- sum(shooting_2018$num_injured)
# Aggregate Data Table grouped by state, showing total killed in state,
# total shootings, and average deaths per shooting in state
aggregate_data <- shooting_2018 %>%
group_by(state) %>%
summarize (
sum = sum(num_killed),
n = n(),
mean = mean(num_killed),
value = round(mean,2)
) %>%
arrange(desc(sum)) %>%
select(state,sum, n, value)
# Particular incident info (Parkland Shooting)
parkland <- shooting_2018%>%
filter(city == "Pompano Beach (Parkland)")
parkland_date <- parkland %>%
select(date)
parkland_address <- parkland %>%
select(address)
parkland_deaths <- parkland %>%
select(num_killed)
parkland_injured <- parkland %>%
select(num_injured)
parkland_state <- parkland %>%
select(state)
# Must be on one line to work properly
parkland_link <- "[Here](https://www.cnn.com/2018/02/15/us/florida-shooting-victims-school/index.html)"
# Interactive Map of the U.S. Showing where shootings occured, size dependent
# the amount killed.
g <- list(
scope = "usa",
projection = list(type = "albers usa"),
showland = TRUE,
landcolor = toRGB("black"),
subunitcolor = toRGB("gray85"),
countrycolor = toRGB("gray85"),
countrywidth = 0.5,
subunitwidth = 0.5
)
graph_of_shootings <- plot_geo(shooting_2018, lat = ~ lat, lon = ~ lng) %>%
add_markers(
text = ~ paste(address, city, state, paste("Deaths:", num_killed),
paste("Injured:", num_injured),
sep = "<br />"
),
color = "Blue", symbol = I("circle"), size = ~ num_killed,
colors = "Green"
) %>%
colorbar(title = "Deaths in Shooting") %>%
layout(
title = "Shootings in 2018 <br />(size = amount of deaths)
Hover For More Information", geo = g
)
# My plot that is a stacked bar chart of deaths and injured by state
new_data <- shooting_2018 %>%
group_by(state) %>%
summarize (
sum = sum(num_killed),
sum2 = sum(num_injured)
)
my_plot <- plot_ly(new_data, x = ~state, y = ~sum,
type = 'bar', name = 'Killed') %>%
add_trace(y = ~sum2, name = 'Injured') %>%
layout(yaxis = list(title = 'Injured + Killed'),
xaxis = list(title = "States", tickangle = -45),
margin = list(b = 100),
barmode = 'stack'
)
styler:::style_active_file()
styler:::style_active_file()
lintr:::addin_lint()
styler:::style_active_file()
lintr:::addin_lint()
shiny::runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
install.packages("shiny")
shiny::runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
# Define a new `ui` variable. This variable should be assigned a `fluidPage()`
# layout, which should be passed the following:
ui <- fluidPage (
h1("First Shiny Website"),
p("I am so excited to ", strong("code this"), "hellko")
)
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1')
setwd("~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("~/Desktop/Info201/Graph for Class")
read.csv("file.csv", header = FALSE)
Mother Jones - Mass Shootings Database, 1982 - 2018 - Sheet1.csv
View(file.csv)
app <- read.csv("file.csv", header = FALSE)
View(app)
app <- read.csv("file.csv", header = TRUE)
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
my_plot <- plot_ly(app,
x = ~venue, y = ~venue,
type = "bar", name = "Killed")
my_plot
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
my_plot <- plot_ly(app,
x = ~venue, y = ~total_victims,
type = "bar", name = "Killed")
my_plot
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
my_plot <- plot_ly(app,
x = ~venue, y = ~sum(total_victims),
type = "bar", name = "Killed")
my_plot
app <- read.csv("file.csv", header = TRUE)
library(dplyr)
library(ggplot2)
library(plotly)
my_plot <- plot_ly(app,
x = ~venue, y = ~total_victims,
type = "bar", name = "Killed")
my_plot
unique(app$venue)
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
h1("Hello")
)
# A page header
# Add a select input for the x variable
# Add a select input for the y variable
# Add a sliderInput to set the size of each point
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
setwd("~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-3")
# UI for scatterplot
library(shiny)
# Get a vector of column names (from `mpg`) to use as select inputs
select_values <- colnames(mpg)
# Create a shinyUI with a `fluidPage` layout
ui <- fluidPage(
h1("Hello")
)
# A page header
# Add a select input for the x variable
# Add a select input for the y variable
# Add a sliderInput to set the size of each point
# Add a selectInput that allows you to select a color from a list of choices
# Plot the output with the name "scatter"
runApp()
runApp()
runApp()
variable <- output$xvariable
runApp()
runApp()
View(mpg)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
p
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-5')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-5')
runApp('~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-5')
setwd("~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-5")
runApp()
runApp()
runApp()
setwd("~/Desktop/Info201/chapter16practice/ch16-shiny/exercise-5")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
state_codes
state_codes
runApp()
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
View(state_codes)
runApp()
runApp()
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({function(data,  search = "", xvar = "population", yvar = "votes") {
# Get x and y max
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
# Filter data based on search
data <- data %>%
filter(grepl(output$state, state))
# Plot data
plot_ly(x = data[, xvar],
y = data[, yvar],
mode="markers",
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
})
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# server.R
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$scatter <- renderPlotly({function(data,  search = "", xvar = "population", yvar = "votes") {
# Get x and y max
xmax <- max(data[,xvar]) * 1.5
ymax <- max(data[,yvar]) * 1.5
# Filter data based on search
data <- data %>%
filter(grepl(output$state, state))
# Plot data
plot_ly(x = data[, xvar],
y = data[, yvar],
mode="markers",
marker = list(
opacity = .4,
size = 10
)) %>%
layout(xaxis = list(range = c(0, xmax), title = xvar),
yaxis = list(range = c(0, ymax), title = yvar)
) %>%
return()
}
})
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
})
})
runApp()
runApp()
# server.R
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
output$scatter <- renderPlotly({
return(build_scatter(joined_data, input$state, "population", "votes" ))
})
})
})
runApp()
# server.R
library(dplyr)
# Read in data
source('./scripts/build_map.R')
source('./scripts/build_scatter.R')
df <- read.csv('./data/electoral_college.csv', stringsAsFactors = FALSE)
state_codes <- read.csv('./data/state_codes.csv', stringsAsFactors = FALSE)
# Join together state.codes and df
joined_data <- left_join(df, state_codes, by="state")
# Compute the electoral votes per 100K people in each state
joined_data <- joined_data %>% mutate(ratio = votes/population * 100000)
# Start shinyServer
shinyServer(function(input, output) {
# Render a plotly object that returns your map
output$map <- renderPlotly({
return(build_map(joined_data, input$mapvar))
output$scattermap <- renderPlotly({
return(build_scatter(joined_data, input$state, "population", "votes" ))
})
})
})
runApp()
runApp()
runApp()
output$scattermap <- renderPlot({
return(build_scatter(joined_data,  search = input$state, xvar = "population", yvar = "votes" ))
})
output$scattermap <- renderPlot({
return(build_scatter(joined_data,  search = input$state, xvar = "population", yvar = "votes" ))
runApp()
runApp()
runApp()
runApp()
2+2
hi <- "hello"
hi
runApp()
